package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + ".go"

	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-api. DO NOT EDIT")
	g.P()
	g.P("package ", file.GoPackageName)
	// log.Printf("%v\n", file.Messages[0])
	for _, msg := range file.Messages {
		mesgStruct := messageToStruct(msg)

		for _, msgS := range mesgStruct {
			g.P(msgS)
		}
	}
	return g
}

func messageToStruct(m *protogen.Message) []string {
	stringRows := make([]string, 0)
	structName := strings.Replace(string(m.Desc.FullName()), "api.", "", 1)

	dataRows := make([]string, 0)
	for _, fx := range m.Fields {
		dataRows = append(dataRows,
			fmt.Sprintf("%v %v `json:\"%v\"`", capitalize(string(fx.Desc.Name())), fx.Desc.Kind(), fx.Desc.JSONName()),
		)
	}

	stringRows = append(stringRows,
		fmt.Sprintf("type %v struct {", structName),
	)
	stringRows = append(stringRows, dataRows...)
	stringRows = append(stringRows, "}")

	return stringRows
}

func capitalize(inp string) string {
	return fmt.Sprintf("%v%v", strings.ToUpper(string(inp[0])), inp[1:])
}
